
[defines]
;This section defines variables, which can be used elsewhere in the ini file
chub.home.dir = ..
java.library.path=..\lib\portable
java.net.preferIPv4Stack=true 

[service]
appname = Mttk AS2 Service 64 bit
servicename = Mttk AS2 Service 64 bit
displayname = Mttk AS2 Service 64 bit
servicedescription =Mttk AS2 Service 64 bit


;Size of internal buffer for string handling
;increase if you use very long command line parameters e.g. a very long classpath
stringbuffer = 16000


;delay n milliseconds to start the Java VM
;Default is no start delay
;startdelay = 10000

;service dependencies can be added
;as a comma separated string "dep1,dep2"
;dependencies=depend2

;service start type
;auto demand disabled	
;default is auto
starttype=auto

;Allow interaction with desktop
;This is a service configuration flag; default is false
;interactwithdesktop = false

;Allocate a console and register a console event handler to catch shutdown events.
useconsolehandler=false

;Call <stopclass>.<stopmethod> through JNI so stop the JVM.
stopclass=java/lang/System 
stopmethod=exit 

;Take care to specify the right signature for your method. void System.exit( int code ) has 
stopsignature=(I)V


;Redirect C level stdout and stderr to the specified files
;Please note that those are diffrent files then the ones used below for 
;Java level stdout and stderr
;Default is no redirection
;stdout=c:\stdout.log
;stdoutappend=no
;stderr=c:\stderr.log
;stderrappend=no

;Redirect JAVA level System.out and System.err to the specified files
;This simply sets new output streams for System.out and System.err after
;the JVM is initialized but before the main method is called.
;You might find that this option has no effect at all for some applications, as the 
;JAVA application is of course free to redirect System.out and System.err 
;to some other log mechanism.
;Default is no redirection
;Default is to overwrite file
;systemout=c:\systemout.log
;systemoutappend=no
;systemerr=c:\systemerr.log
;systemerrappend=no


[java]
;Path to the java runtime used
;If this option is not used the default from the registry will be used
jrepath=..\..\runtime\jre

;Type of jvm to be used. Alternative mechanism to specifiying -client or -server on the command line.
;Can use any JVM name, which is diffrent from the command line which will only allow -client and -server
;Useful when using a JVM diffrent from Suns implementation.
;Jvmtype can be a comma seperated list. JSL will first find a JVM installation location. THEN it will load the first 
;type of jvm in the list it can find. It will NOT search in alternative JVM locations for alternative jvm types. 
;Be careful what JVM is actullay installed and used before you report a bug on this feature.
jvmtype=server
;jvmtype=server,client,hotspot,classic

;working directory
;If the working directory path starts with a "." it will be replaced with the .ini directory path
;This is neccessary because a service does not inherit a working directory from the shell. Therefore "." would be meaningless.
;This logic for "." is only required for the wrkdir bas all other paths will resolve a "." against the working dir once it is set.
;wrkdir=c:\java\test\jsl_0_9_9m\release
wrkdir=..

;The java command line
;The entry method below using a paramter list still works but the command line variant is more convenient, 
cmdline = -cp "..\bootstrap.jar" io.abic.startup.Bootstrap start

